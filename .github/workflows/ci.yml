# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI tests

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "gradle"

      # Cache Gradle dependencies and wrapper
      - name: Setup Gradle Cache
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      - name: Set up Gradle wrapper
        run: gradle wrapper

      - name: Build with Gradle Wrapper
        run: ./gradlew build -x test

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    #   with:
    #     gradle-version: '8.9'
    #
    # - name: Build with Gradle 8.9
    #   run: gradle build

  test-unit:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "gradle"

      # Cache Gradle dependencies and wrapper
      - name: Setup Gradle Cache
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      - name: Set up Gradle wrapper
        run: gradle wrapper

      - name: Test with Gradle
        run: ./gradlew test -PexcludeTags=integration,e2e

  test-integration-and-e2e:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "gradle"

      # Cache Gradle dependencies and wrapper
      - name: Setup Gradle Cache
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      - name: Set up Gradle wrapper
        run: gradle wrapper

        # Add Docker Compose setup
      - name: Set up Docker Compose
        uses: docker/setup-buildx-action@v3

      # Start Docker containers
      - name: Start Docker containers
        run: docker compose up -d

      # Wait for containers to be ready (optional but recommended)
      - name: Wait for containers to be ready
        run: |
          sleep 10s  # Adjust time based on your needs

      - name: Test with Gradle
        run: ./gradlew test -PexcludeTags=integration,e2e

      # Clean up Docker containers
      - name: Stop Docker containers
        if: always() # This ensures cleanup happens even if tests fail
        run: docker compose down

  load-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "gradle"

      # Cache Gradle dependencies and wrapper
      - name: Setup Gradle Cache
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      - name: Set up Gradle wrapper
        run: gradle wrapper

      # Install k6
      - name: Install k6
        run: |
          curl -L https://github.com/grafana/k6/releases/download/v0.47.0/k6-v0.47.0-linux-amd64.tar.gz -o k6.tar.gz
          tar -xzf k6.tar.gz
          sudo cp k6-v0.47.0-linux-amd64/k6 /usr/local/bin/

      # Set up Docker Compose
      - name: Set up Docker Compose
        uses: docker/setup-buildx-action@v3

      # Start Docker containers and Spring Boot app
      - name: Start Docker containers
        run: docker compose up -d

      # Wait for containers and app to be ready
      - name: Wait for services to be ready
        run: |
          echo "Waiting for application to start..."
          timeout 60s bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:8080/healthz)" != "200" ]]; do sleep 2; done' || exit 1
          echo "Application is up!"

      - name: Run k6 load test
        run: k6 run load-test-healthz.js

      # Clean up Docker containers
      - name: Stop Docker containers
        if: always() # This ensures cleanup happens even if tests fail
        run: docker compose down

  dependency-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "gradle"

      - name: Set up Gradle wrapper
        run: gradle wrapper

      # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
      # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
